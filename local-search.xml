<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>构建大根堆</title>
    <link href="/2025/04/22/%E6%9E%84%E5%BB%BA%E5%A4%A7%E6%A0%B9%E5%A0%86/"/>
    <url>/2025/04/22/%E6%9E%84%E5%BB%BA%E5%A4%A7%E6%A0%B9%E5%A0%86/</url>
    
    <content type="html"><![CDATA[<p>记得2023年面一个cv组的时候突然被问到如何手撕一个堆，当时完全懵掉了，后来学习了一下，然后25年开始找实习又忘记了，于是记录一下如何实现一个最大堆，这里用数组来实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MaxHeap</span> &#123;<br>    <span class="hljs-keyword">private</span> List&lt;Integer&gt; heap;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MaxHeap</span><span class="hljs-params">()</span> &#123;<br>        heap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    &#125;<br><br>    <span class="hljs-comment">// 获取堆顶元素</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">peek</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (heap.isEmpty()) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<span class="hljs-string">&quot;堆为空&quot;</span>);<br>        <span class="hljs-keyword">return</span> heap.get(<span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 插入元素</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> &#123;<br>        heap.add(val);                     <span class="hljs-comment">// 添加到末尾</span><br>        siftUp(heap.size() - <span class="hljs-number">1</span>);           <span class="hljs-comment">// 向上调整</span><br>    &#125;<br><br>    <span class="hljs-comment">// 删除并返回最大元素</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">extractMax</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (heap.isEmpty()) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<span class="hljs-string">&quot;堆为空&quot;</span>);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> heap.get(<span class="hljs-number">0</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">last</span> <span class="hljs-operator">=</span> heap.remove(heap.size() - <span class="hljs-number">1</span>); <span class="hljs-comment">// 移除最后一个元素</span><br>        <span class="hljs-keyword">if</span> (!heap.isEmpty()) &#123;<br>            heap.set(<span class="hljs-number">0</span>, last);          <span class="hljs-comment">// 用最后元素替换堆顶</span><br>            siftDown(<span class="hljs-number">0</span>);                <span class="hljs-comment">// 向下调整</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> max;<br>    &#125;<br><br>    <span class="hljs-comment">// 向上调整</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">siftUp</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> &#123;<br>        <span class="hljs-keyword">while</span> (i &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">parent</span> <span class="hljs-operator">=</span> (i - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> (heap.get(i) &lt;= heap.get(parent)) <span class="hljs-keyword">break</span>;<br>            swap(i, parent);<br>            i = parent;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 向下调整</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">siftDown</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> heap.size();<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">largest</span> <span class="hljs-operator">=</span> i;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span> * i + <span class="hljs-number">1</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span> * i + <span class="hljs-number">2</span>;<br><br>            <span class="hljs-keyword">if</span> (left &lt; n &amp;&amp; heap.get(left) &gt; heap.get(largest)) &#123;<br>                largest = left;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (right &lt; n &amp;&amp; heap.get(right) &gt; heap.get(largest)) &#123;<br>                largest = right;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (largest == i) <span class="hljs-keyword">break</span>;<br><br>            swap(i, largest);<br>            i = largest;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> heap.get(i);<br>        heap.set(i, heap.get(j));<br>        heap.set(j, tmp);<br>    &#125;<br><br>    <span class="hljs-comment">// 打印堆内容</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printHeap</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(heap);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">MaxHeap</span> <span class="hljs-variable">maxHeap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MaxHeap</span>();<br>        <span class="hljs-type">int</span>[] nums = &#123;<span class="hljs-number">3</span>, <span class="hljs-number">10</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>&#125;;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : nums) &#123;<br>            maxHeap.insert(num);<br>        &#125;<br><br>        System.out.print(<span class="hljs-string">&quot;当前堆：&quot;</span>);<br>        maxHeap.printHeap();<br><br>        System.out.println(<span class="hljs-string">&quot;最大值：&quot;</span> + maxHeap.extractMax());<br>        System.out.print(<span class="hljs-string">&quot;删除后堆：&quot;</span>);<br>        maxHeap.printHeap();<br>        System.out.println(<span class="hljs-string">&quot;最大值：&quot;</span> + maxHeap.extractMax());<br>        System.out.print(<span class="hljs-string">&quot;删除后堆：&quot;</span>);<br>        maxHeap.printHeap();<br>        maxHeap.insert(<span class="hljs-number">9</span>);<br>        System.out.print(<span class="hljs-string">&quot;插入后当前堆：&quot;</span>);<br>        maxHeap.printHeap();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出如下，可以看到自动浮沉</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">当前堆：<span class="hljs-string">[10, 6, 8, 3, 2, 5, 1]</span><br>最大值：<span class="hljs-number">10</span><br>删除后堆：<span class="hljs-string">[8, 6, 5, 3, 2, 1]</span><br>最大值：<span class="hljs-number">8</span><br>删除后堆：<span class="hljs-string">[6, 3, 5, 1, 2]</span><br>插入后当前堆：<span class="hljs-string">[9, 3, 6, 1, 2, 5]</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
      <category>腾讯</category>
      
      <category>算法</category>
      
      <category>算法</category>
      
      <category>数据结构</category>
      
      <category>堆</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
